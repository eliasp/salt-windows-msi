<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">

  <Product
      Manufacturer = "SaltStack, Inc."
      Name         = "Salt Minion $(var.DisplayVersion)"
      Version      = "$(var.InternalVersion)"
      UpgradeCode  = "FC6FB3A2-65DE-41A9-AD91-D10A402BD641"
      Id           = "*"
      Language     = "1033">
    <Package InstallScope="perMachine"  InstallerVersion="405" Compressed="yes"/>

    <!-- Conditions for installation -->
    <Condition Message="Installation requires Windows 7/Server 2012. Found MsiNTProductType [MsiNTProductType], VersionNT [VersionNT]">
      Installed
      OR  (MsiNTProductType = 1) AND (VersionNT >= 601)
      OR  (MsiNTProductType = 2) AND (VersionNT >= 602)
      OR  (MsiNTProductType = 3) AND (VersionNT >= 602)
    </Condition>
    <Condition Message="Installation requires 125 MB RAM. Found [PhysicalMemory] MB">Installed OR (PhysicalMemory > 125)</Condition>

    <!-- ReadConfig_IMCAC must run immediately as Admin, the msi cannot elevate before deferred, so the user must be Admin -->
    <Condition Message="Installation requires Administrator privileges. Please open from an elevated command prompt.">Privileged</Condition>

    <Condition Message="Please rename MASTER_HOSTNAME to MASTER"           >Installed OR NOT MASTER_HOSTNAME     </Condition>
    <Condition Message="Please rename MINION_HOSTNAME to MINION_ID"        >Installed OR NOT MINION_HOSTNAME     </Condition>
    <Condition Message="Please rename START_MINION_SERVICE to START_MINION">Installed OR NOT START_MINION_SERVICE</Condition>

    <Condition Message='CONFIG_TYPE must not be "[CONFIG_TYPE]". Please use "Existing", "Custom" or "Default".'>
      Installed
      OR (CONFIG_TYPE = "Existing")
      OR (CONFIG_TYPE = "Custom")
      OR (CONFIG_TYPE = "Default")
    </Condition>
    <Condition Message='START_MINION must not be [START_MINION]. Please use 1 or "" (two double quotes).'>
      (START_MINION = 1) OR NOT START_MINION OR Installed
    </Condition>
    <Condition Message='NSIS Salt Minion unexpected uninstall instruction [NSIS_UNINSTALLSTRING]'>
      NOT Installed AND (NSIS_UNINSTALLSTRING >> "uninst.exe" OR NOT NSIS_UNINSTALLSTRING) OR Installed
    </Condition>
    <Condition Message='NSIS Salt Minion unexpected version [NSIS_DISPLAYVERSION]'>
      <![CDATA[NOT Installed AND ((NSIS_DISPLAYVERSION << "v")
                               OR (NSIS_DISPLAYVERSION << "20")
                               OR (NSIS_DISPLAYVERSION << "30") OR NOT NSIS_DISPLAYVERSION) OR Installed]]>
    </Condition>

    <!-- Abort msi install if NSIS installed -->
    <Condition Message='Please manually uninstall Salt Minion [NSIS_DISPLAYVERSION]'>
      NOT (NSIS_UNINSTALLSTRING >> "uninst.exe")
    </Condition>

    <!--
        Properties unset by default:
           MASTER
           MASTER_KEY
           MINION_ID
           MINION_CONFIG
           CUSTOM_CONFIG
           REMOVE_CONFIG
    -->
    <Property Id="CONFIG_TYPE"              Value="Existing"             />
    <Property Id="START_MINION"             Value="1"                    />
    <Property Id="ROOTDRIVE"                Value="C:\"/>
    <Property Id="ARPPRODUCTICON"           Value="icon.ico" />
    <Property Id="MSIRESTARTMANAGERCONTROL" Value="Disable"/>
    <Property Id="MsiLogging"               Value="v"/>
    <Property Id="MSIUSEREALADMINDETECTION" Value="1"/>
    <Property Id="WIXUI_INSTALLDIR"         Value="INSTALLFOLDER"/>

    <!-- Search previous NSIS installation.
         Assume NSIS always (32 and 64 bit Salt-minion) writes into the 32bit WoW registry -->
    <Property           Id="NSIS_UNINSTALLSTRING">
        <RegistrySearch Id="NSIS_UNINSTALLSTRING"
            Root="HKLM" Key="SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Salt Minion" Name="UninstallString" Type="raw" Win64="no" />
    </Property>
        <Property       Id="NSIS_DISPLAYVERSION">
        <RegistrySearch Id="NSIS_DISPLAYVERSION"
            Root="HKLM" Key="SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Salt Minion" Name="DisplayVersion" Type="raw" Win64="no" />
    </Property>

    <!-- The sign of NSIS install  -->
    <SetProperty Id="nsis_exe"              Before="LaunchConditions" Value="1">NSIS_UNINSTALLSTRING >> "uninst.exe"</SetProperty>

    <!-- Deferreds cannot access Session.Property but conditionally remove folders with lifetime data -->
    <!-- CA are executed twice? On Error resume may help-->
    <CustomAction Id="delete_excl_config_DECAX" Script="vbscript">
On error resume next
Set fso = CreateObject("Scripting.FileSystemObject")
Set wshshell = CreateObject("Wscript.Shell")
If fso.FileExists("C:\salt\ssm.exe") Then
  wshshell.Run "C:\salt\ssm.exe stop   salt-minion", 0, True
  wshshell.Run "cmd /c ping -n 5 127.0.0.1", 0, True
  wshshell.Run "C:\salt\ssm.exe remove  salt-minion confirm", 0, True
  wshshell.Run "cmd /c ping -n 5 127.0.0.1", 0, True
End If
If fso.FileExists("C:\salt\ssm.exe") Then
  fso.DeleteFile "c:\salt\ssm.exe"
End If
fso.DeleteFile "c:\salt\salt*"
If fso.FolderExists("C:\salt\bin") Then
  fso.DeleteFolder "c:\salt\bin"
End If
    </CustomAction>
    <CustomAction Id="delete_VARFOLDER_DECAX" Script="vbscript">
On Error Resume Next
Dim fso
Set fso = CreateObject("Scripting.FileSystemObject")
if fso.FolderExists("c:\salt\var") then
  fso.DeleteFolder "c:\salt\var"
end if
    </CustomAction>

    <CustomAction Id="capture_salt" Script="vbscript">
' workaround for Salt-Minions that delete var folder
Dim fso
Set fso = CreateObject("Scripting.FileSystemObject")
if fso.FolderExists("c:\salt\var\cache\salt\minion\extmods") then
  ' destination must not exist
  if fso.FolderExists("c:\salt_tmp_msi_wix") then
    fso.DeleteFolder "c:\salt_tmp_msi_wix"
  end if
  ' parent of destination must exist
  fso.CreateFolder "c:\salt_tmp_msi_wix"
  fso.CopyFolder "c:\salt\var\cache\salt\minion\extmods", "c:\salt_tmp_msi_wix\extmods"
end if
    </CustomAction>
    <CustomAction Id="restore_salt" Script="vbscript">
' workaround for Salt-Minions that delete var folder
Dim fso
Set fso = CreateObject("Scripting.FileSystemObject")

if fso.FolderExists("c:\salt_tmp_msi_wix\extmods") then
  ' destination must not exist
  if fso.FolderExists("c:\salt\var\cache\salt\minion\extmods") then
    fso.DeleteFolder "c:\salt\var\cache\salt\minion\extmods"
  end if
  ' parent of destination must exist
  if Not fso.FolderExists("c:\salt") then
    fso.CreateFolder "c:\salt"
  end if
  if Not fso.FolderExists("c:\salt\var") then
    fso.CreateFolder "c:\salt\var"
  end if
  if Not fso.FolderExists("c:\salt\var\cache") then
    fso.CreateFolder "c:\salt\var\cache"
  end if
  if Not fso.FolderExists("c:\salt\var\cache\salt") then
    fso.CreateFolder "c:\salt\var\cache\salt"
  end if
  if Not fso.FolderExists("c:\salt\var\cache\salt\minion") then
    fso.CreateFolder "c:\salt\var\cache\salt\minion"
  end if

  fso.MoveFolder "c:\salt_tmp_msi_wix\extmods", "c:\salt\var\cache\salt\minion\extmods"
  fso.DeleteFolder "c:\salt_tmp_msi_wix"
end if
    </CustomAction>
    <CustomAction Id="hideSalt" Script="vbscript">
On error resume next
Set objShell = CreateObject("WScript.Shell")
intReturn = objShell.Run("attrib.exe +H C:\salt" , 0, true)
    </CustomAction>

    <CustomAction Id="stopSalt" Script="vbscript">
On error resume next
Set objShell = CreateObject("WScript.Shell")
objShell.Run "net stop salt-minion", 0, true
objShell.Run "cmd /c ping -n 5 127.0.0.1", 0, True
    </CustomAction>

    <CustomAction Id="delete_incl_config_DECAX" Script="vbscript">
On error resume next
Set fso = CreateObject("Scripting.FileSystemObject")
Set wshshell = CreateObject("Wscript.Shell")

If fso.FileExists("C:\salt\ssm.exe") Then
  wshshell.Run "C:\salt\ssm.exe stop salt-minion", 0, True
  wshshell.Run "cmd /c ping -n 5 127.0.0.1", 0, True
  wshshell.Run "C:\salt\ssm.exe remove salt-minion confirm", 0, True
  wshshell.Run "cmd /c ping -n 5 127.0.0.1", 0, True
End If
If fso.FolderExists("C:\salt") Then
  fso.DeleteFolder "c:\salt"
End If
    </CustomAction>


    <InstallUISequence>         <!-- * * * * * * * * * * * * * * * * * * Sequence with GUI * * * * * * * * * * * * * * * * *  -->
      <Custom Action='ReadConfig_IMCAC'            Before='MigrateFeatureStates'     >NOT Installed</Custom>

      <LaunchConditions After="AppSearch" /> <!-- Benefit is unclear. Was used when detecting MFC. Probably not needed. -->
    </InstallUISequence>

    <InstallExecuteSequence>     <!-- * * * * * * * * * * * * * * * * *  Sequence without GUI (silent, headless)  * * * * * *  -->
      <!-- stopSalt because log file must be released -->
      <Custom Action='stopSalt'                   Before='InstallValidate'          >1</Custom>

      <Custom Action='ReadConfig_IMCAC'            Before='MigrateFeatureStates'    >NOT Installed</Custom>
      <Custom Action='del_NSIS_DECAC'               After='InstallInitialize'       >nsis_exe</Custom>

      <Custom Action='capture_salt'                After='FindRelatedProducts'      >WIX_UPGRADE_DETECTED</Custom>  <!--only on upgrade, not on uninstall -->

      <Custom Action='WriteConfig_CADH'
              Before='WriteConfig_DECAC'                                            >NOT Installed</Custom>
      <Custom Action='WriteConfig_DECAC'           After='WriteIniValues'           >NOT Installed</Custom>

      <Custom Action='restore_salt'                After='PublishProduct'           >WIX_UPGRADE_DETECTED</Custom>  <!--only on upgrade, not on uninstall -->

      <Custom Action='delete_VARFOLDER_DECAX'      After='InstallFinalize'          >REMOVE ~= "ALL"</Custom>
      <Custom Action='delete_excl_config_DECAX'    After='InstallFinalize'          >(REMOVE ~= "ALL") and (NOT REMOVE_CONFIG)</Custom>
      <Custom Action='delete_incl_config_DECAX'    After='InstallFinalize'          >(REMOVE ~= "ALL") and REMOVE_CONFIG</Custom>  <!--only on uninstall, not on upgrade? -->


      <!-- Optionally start the service  -->
      <StartServices Sequence="5900"><![CDATA[START_MINION = "1"]]></StartServices>
    </InstallExecuteSequence>   <!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  -->


    <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />

    <DirectoryRef Id="TARGETDIR">
    <!--Visual C++ runtimes depend on the target platform -->
    <?if $(var.TargetPlatform)=amd64 ?>
      <Merge Id="MSM_VC140_CRT" SourceFile="c:\salt_msi_resources\Microsoft_VC140_CRT_x64.msm" DiskId="1" Language="0"/>
    <?else ?>
      <Merge Id="MSM_VC140_CRT" SourceFile="c:\salt_msi_resources\Microsoft_VC140_CRT_x86.msm" DiskId="1" Language="0"/>
    <?endif ?>
    </DirectoryRef>

    <Feature Id="ProductFeature" Title="Minion" Level="1">
      <ComponentGroupRef Id="ProductComponents" />
      <ComponentRef      Id="RemoveFolderEx_BINFOLDER_Component" /> <!-- On uninstall and upgrade -->

      <Feature Id="VC140" Title="VC++ 2015" AllowAdvertise="no" Display="hidden"><MergeRef Id="MSM_VC140_CRT"/></Feature>
    </Feature>

    <Icon Id="icon.ico" SourceFile="salt.ico" />
    <WixVariable Id="WixUILicenseRtf" Value="LICENSE.rtf" />


    <WixVariable Id="WixUIBannerBmp" Value="imgTop.jpg" />
    <WixVariable Id="WixUIDialogBmp" Value="imgLeft.png" />


    <!-- GUI -->
    <UI>
      <UIRef Id="WixUI_Mondo" />
      <Publish Dialog="LicenseAgreementDlg"   Control="Next"   Event="NewDialog"   Value="ProductUIsettings" Order="3">LicenseAccepted = "1"</Publish>
      <Publish Dialog="ProductUIsettings"     Control="Next"   Event="NewDialog"   Value="VerifyReadyDlg">1</Publish>
      <Publish Dialog="ProductUIsettings"     Control="Back"   Event="NewDialog"   Value="LicenseAgreementDlg">1</Publish>
      <Publish Dialog="ProductUIsettings"     Control="Cancel" Event="SpawnDialog" Value="CancelDlg">1</Publish>
      <Publish Dialog="VerifyReadyDlg"        Control="Back"   Event="NewDialog"   Value="ProductUIsettings">1</Publish>
      <Dialog Id="ProductUIsettings" Width="370" Height="270" Title="[ProductName] Setup">
        <Control Id="Title"        Type="Text"       X="15"  Y="6"   Width="200" Height="15" Transparent="yes" NoPrefix="yes" Text="{\WixUI_Font_Title}Hosts Specification" />
        <Control Id="Description"  Type="Text"       X="15"  Y="23"  Width="280" Height="15" Transparent="yes" NoPrefix="yes" Text="Please specify master and minion." />
        <Control Id="BannerBitmap" Type="Bitmap"     X="0"   Y="0"   Width="370" Height="44" TabSkip="no" Text="!(loc.InstallDirDlgBannerBitmap)" />
        <Control Id="BannerLine"   Type="Line"       X="0"   Y="44"  Width="370" Height="0" />
        <Control Id="BottomLine"   Type="Line"       X="0"   Y="234" Width="370" Height="0" />

        <Control Id="MasterLabel"  Type="Text"       X="20"  Y="55"  Width="280" Height="15" Transparent="yes" NoPrefix="yes" Text="Master (single hostname or IP address):" />
        <Control Id="MasterId"     Type="Edit"       X="30"  Y="70"  Width="190" Height="15" Property="MASTER" />
        <Control Id="MinionLabel"  Type="Text"       X="20"  Y="85"  Width="280" Height="15" Transparent="yes" NoPrefix="yes" Text="Minion:" />
        <Control Id="MinionId"     Type="Edit"       X="30"  Y="100" Width="190" Height="15" Property="MINION_ID" />
        <Control Id="StartService" Type="CheckBox"   X="20"  Y="140" Width="280" Height="15" Property="START_MINION"       CheckBoxValue="1" Text="&amp;Start salt-minion service immediately"/>
        <Control Id="HideInARP"    Type="CheckBox"   X="20"  Y="155" Width="280" Height="15" Property="ARPSYSTEMCOMPONENT" CheckBoxValue="1" Text="&amp;Hide in 'Programs and Features'"/>

        <Control Id="Next"         Type="PushButton" X="236" Y="243" Width="56"  Height="17" Default="yes" Text="!(loc.WixUINext)" />
        <Control Id="Back"         Type="PushButton" X="180" Y="243" Width="56"  Height="17"               Text="!(loc.WixUIBack)" />
        <Control Id="Cancel"       Type="PushButton" X="304" Y="243" Width="56"  Height="17" Cancel="yes"  Text="!(loc.WixUICancel)"/>
      </Dialog>
    </UI>


    <!--  Immediate (*_IMCAC) and defferred (*_DECAC) custom action declarations. -->
    <CustomAction Id="ReadConfig_IMCAC"     BinaryKey='MinionConfigExt' DllEntry='ReadConfig_IMCAC'  Execute='firstSequence'/> 
    <CustomAction Id="del_NSIS_DECAC"       BinaryKey='MinionConfigExt' DllEntry='del_NSIS_DECAC'    Execute='deferred' Return='check' Impersonate='no'/>
    <CustomAction Id="WriteConfig_DECAC"    BinaryKey='MinionConfigExt' DllEntry='WriteConfig_DECAC' Execute='deferred' Return='check' Impersonate='no'/>
    <Binary       Id='MinionConfigExt'      SourceFile='$(var.MinionConfigurationExtension.TargetDir)$(var.MinionConfigurationExtension.TargetName).CA.dll'/>
    <CustomAction Id="WriteConfig_CADH"     Property="WriteConfig_DECAC" Value="root_dir=[INSTALLFOLDER];master=[MASTER];id=[MINION_ID];config_type=[CONFIG_TYPE];minion_config=[MINION_CONFIG];custom_config=[CUSTOM_CONFIG];sourcedir=[SOURCEDIR];conffolder=[CONFFOLDER];minion_d_conf_folder=[MINION_D_CONF_FOLDER]" />


    <!--  Windows service (nssm and without)-->
    <?if 1=1 ?>
    <ComponentGroup Id="service">
      <Component Id="cmp906378FA53882935FD2EC0CC58D32FAC" Directory="INSTALLFOLDER" Guid="{E27F3682-194D-4CC2-9F9B-F3E1D53ADCDB}">
        <File Id="ssm.exe" KeyPath="yes" Source="$(var.dist)\bin\ssm.exe" />
        <ServiceInstall
          Account="LocalSystem" ErrorControl="normal" Start="auto" Type="ownProcess" Vital="yes"
          Name="salt-minion"
          Description="Salt Minion from saltstack.com"
          DisplayName="salt-minion"
          Id="si1">
          <util:ServiceConfig
            FirstFailureActionType="none"
            SecondFailureActionType="none"
            ThirdFailureActionType="none" />
        </ServiceInstall>
        <ServiceControl Name="salt-minion" Remove="uninstall" Stop="both" Start="install" Wait="yes" Id="sc1">
          <ServiceArgument />
        </ServiceControl>
        <CreateFolder />
        <util:EventSource Log="Application" Name="nssm" EventMessageFile="[#ssm.exe]" />
        <RegistryKey Root="HKLM" Key="System\CurrentControlSet\Services\salt-minion">
          <RegistryKey Key="Parameters">
            <RegistryValue Type="expandable" Name="AppDirectory"         Value="[INSTALLFOLDER]bin" />
            <RegistryValue Type="expandable" Name="Application"          Value="[INSTALLFOLDER]bin\python.exe" />
            <RegistryValue Type="expandable" Name="AppParameters"        Value="-E -s [INSTALLFOLDER]bin\Scripts\salt-minion -c [INSTALLFOLDER]conf -l quiet" />
            <RegistryValue Type="integer"    Name="AppStopMethodConsole" Value="24000" />
            <RegistryValue Type="integer"    Name="AppStopMethodWindow"  Value="2000" />
            <RegistryValue Type="integer"    Name="AppRestartDelay"      Value="60000" />
            <RegistryKey Key="AppExit">
              <RegistryValue Type="string" Value="Restart" />
            </RegistryKey>
          </RegistryKey>
        </RegistryKey>
      </Component>
    </ComponentGroup>
    <?else ?>
    <ComponentGroup Id="service">
      <Component        Id="servicec1" Directory="BINFOLDER" Guid="51713960-fbe7-4e87-9472-66e3c18f76cd">
        <File           Source="$(var.dist)\bin\python.exe"  KeyPath="yes"/>
        <ServiceInstall Name="salt-minion"  DisplayName="Salt Minion"  Description="Salt Minion from saltstack.com"
                        Arguments="[BINFOLDER]Scripts\salt-minion -c [INSTALLFOLDER]conf -l quiet"
                        Account="LocalSystem"  ErrorControl="normal" Start="auto"  Type="ownProcess"  Vital="yes" >
          <util:ServiceConfig
            FirstFailureActionType="none"
            SecondFailureActionType="none"
            ThirdFailureActionType="none" />
        </ServiceInstall>
        <ServiceControl Name="salt-minion"  Start="install"  Stop="both"  Remove="uninstall"  Wait="yes" Id="ServiceControl">
          <ServiceArgument /> <!-- http://stackoverflow.com/questions/10621082/wix-serviceinstall-arguments  -->
        </ServiceControl>
      </Component>
    </ComponentGroup>
    <?endif ?>


    <!-- Do not create cab files -->
    <MediaTemplate EmbedCab="yes" CompressionLevel="low" />
  </Product>


  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir">      <!-- Outmost directory must be exactly this. Ramirez ch 1 p 25 -->
      <Directory Id="INSTALLFOLDER" Name="salt" >
        <Directory Id="CONFFOLDER" Name="conf" >
          <Directory Id="MINION_D_CONF_FOLDER"  Name="minion.d" />
          <Directory Id="SALT_CONF_PKI_FOLDER" Name="pki" >
            <Directory Id="SALT_CONF_PKI_MINION_FOLDER" Name="minion" />
          </Directory>
        </Directory>
        <Directory Id="BINFOLDER"  Name="bin" />      <!-- For RemoveFolderEX remember pattern -->
        <Directory Id="VARFOLDER"  Name="var" />      <!-- For delete_VARFOLDER_DECAX -->
      </Directory>
    </Directory>

    <!-- Set permissions of the install folder with WixQueryOsWellKnownSID -->
    <PropertyRef Id="WIX_ACCOUNT_ADMINISTRATORS" />
    <Component Id="InstallfolderPermissions"  Directory="INSTALLFOLDER" Guid="B30E119F-0286-4453-8AB7-C6E916FA2843">
      <CreateFolder>
        <Permission User="[WIX_ACCOUNT_ADMINISTRATORS]" GenericAll="yes" TakeOwnership="yes" />
      </CreateFolder>
    </Component>
  </Fragment>

  <Fragment>
    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
      <ComponentGroupRef Id="dist"    />       <!-- Includes dist-amd64.wxs in this directory -->
      <ComponentGroupRef Id="service" />
      <ComponentRef Id="InstallfolderPermissions" />
    </ComponentGroup>
  </Fragment>


  <!--  Remove 'lifetime' data on uninstall. Lifetime data does not originate from the installer. -->
  <!--  Wix uninstall include upgrades. Cannot be used for lifetime data that must persist on upgrade. -->
  <Fragment Id="RemoveFolderEx_Fragment">
    <?define RegDir="SOFTWARE\SaltStack\Salt-Minion"?>
    <?define RegVal_BINFOLDER="RememberForRemoveFolderExBINFOLDER"?>

    <Property Id="BINFOLDER" Secure="yes">
      <RegistrySearch Root="HKLM" Key="$(var.RegDir)" Type="raw"
                Id="BINFOLDER_REGSEARCH" Name="$(var.RegVal_BINFOLDER)" />
    </Property>

    <DirectoryRef Id='BINFOLDER'>
      <Component Id="RemoveFolderEx_BINFOLDER_Component" Guid="b36009bc-ada0-45dc-afda-68c07d137f38">
        <RegistryValue Root="HKLM" Key="$(var.RegDir)" Name="$(var.RegVal_BINFOLDER)"
                Type="string" Value="[BINFOLDER]" KeyPath="yes"/>
        <CreateFolder Directory="BINFOLDER"/>
        <util:RemoveFolderEx Property="BINFOLDER" On="uninstall"/> <!-- Includes upgrade -->
        <RemoveFolder Id="BINFOLDER" On="uninstall"/>
      </Component>
    </DirectoryRef>
  </Fragment>
</Wix>
